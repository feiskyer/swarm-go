package swarm

import (
	"context"
	"fmt"

	"github.com/openai/openai-go"
	"github.com/openai/openai-go/azure"
	"github.com/openai/openai-go/option"
	"github.com/openai/openai-go/packages/ssestream"
)

// OpenAIClient defines the interface for OpenAI API interactions.
// It provides methods for creating both standard and streaming chat completions
// using the OpenAI API.
type OpenAIClient interface {
	// CreateChatCompletion sends a chat completion request to the OpenAI API and returns
	// the complete response. It handles both standard GPT model interactions.
	//
	// Parameters:
	//   - ctx: The context for the API request
	//   - params: Configuration parameters for the chat completion
	//
	// Returns a ChatCompletion response or an error if the request fails.
	CreateChatCompletion(ctx context.Context, params openai.ChatCompletionNewParams) (*openai.ChatCompletion, error)

	// CreateChatCompletionStream creates a streaming connection to the OpenAI API for
	// chat completions. It returns responses as they are generated.
	//
	// Parameters:
	//   - ctx: The context for the API request
	//   - params: Configuration parameters for the chat completion
	//
	// Returns a Stream of ChatCompletionChunk or an error if the stream creation fails.
	CreateChatCompletionStream(ctx context.Context, params openai.ChatCompletionNewParams) (*ssestream.Stream[openai.ChatCompletionChunk], error)
}

// openAIClientWrapper wraps the OpenAI client to implement the OpenAIClient interface.
// It provides a concrete implementation of the OpenAI API interactions.
type openAIClientWrapper struct {
	client *openai.Client
}

// NewOpenAIClient creates a new OpenAI client wrapper with the provided API key.
// It returns nil if the API key is empty.
//
// Parameters:
//   - apiKey: The OpenAI API key for authentication
func NewOpenAIClient(apiKey string) OpenAIClient {
	if apiKey == "" {
		return nil
	}

	return &openAIClientWrapper{
		client: openai.NewClient(option.WithAPIKey(apiKey)),
	}
}

// NewOpenAIClientWithBaseURL creates a new OpenAI client wrapper with a custom base URL.
// This allows for using alternative OpenAI-compatible API endpoints.
//
// Parameters:
//   - apiKey: The OpenAI API key for authentication
//   - baseURL: The custom base URL for the API endpoint
func NewOpenAIClientWithBaseURL(apiKey string, baseURL string) OpenAIClient {
	if apiKey == "" {
		return nil
	}

	if baseURL == "" {
		return &openAIClientWrapper{
			client: openai.NewClient(option.WithAPIKey(apiKey)),
		}
	}

	return &openAIClientWrapper{
		client: openai.NewClient(option.WithAPIKey(apiKey), option.WithBaseURL(baseURL)),
	}
}

// NewAzureOpenAIClient creates a new OpenAI client wrapper configured for Azure OpenAI Services.
// It returns nil if either the API key or endpoint is empty.
//
// Parameters:
//   - apiKey: The Azure OpenAI API key
//   - endpoint: The Azure OpenAI endpoint URL
//   - apiVersion: The Azure OpenAI API version
func NewAzureOpenAIClient(apiKey, endpoint, apiVersion string) OpenAIClient {
	if apiKey == "" || endpoint == "" {
		return nil
	}

	return &openAIClientWrapper{
		client: openai.NewClient(
			azure.WithEndpoint(endpoint, apiVersion),
			azure.WithAPIKey(apiKey),
		),
	}
}

// CreateChatCompletion sends a request to create a chat completion.
// It wraps the underlying API call with proper error handling and context management.
//
// Parameters:
//   - ctx: The context for the API request (defaults to background if nil)
//   - params: The parameters for the chat completion request
//
// Returns the chat completion response or an error if the request fails.
func (c *openAIClientWrapper) CreateChatCompletion(ctx context.Context, params openai.ChatCompletionNewParams) (*openai.ChatCompletion, error) {
	if ctx == nil {
		ctx = context.Background()
	}

	completion, err := c.client.Chat.Completions.New(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create chat completion: %w", err)
	}

	return completion, nil
}

// CreateChatCompletionStream creates a streaming chat completion request.
// It provides a stream of responses as they are generated by the model.
//
// Parameters:
//   - ctx: The context for the API request (defaults to background if nil)
//   - params: The parameters for the streaming chat completion request
//
// Returns a stream of chat completion chunks or an error if the stream creation fails.
func (c *openAIClientWrapper) CreateChatCompletionStream(ctx context.Context, params openai.ChatCompletionNewParams) (*ssestream.Stream[openai.ChatCompletionChunk], error) {
	if ctx == nil {
		ctx = context.Background()
	}

	stream := c.client.Chat.Completions.NewStreaming(ctx, params)
	if stream == nil {
		return nil, fmt.Errorf("failed to create streaming completion")
	}

	return stream, nil
}
